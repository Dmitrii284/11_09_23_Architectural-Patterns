/*
* АРХИТЕКТУРНЫЕ ПАТТЕРНЫ Architectural Patterns
*  
Паттерн MVP - Это послойная архитектура 
Это линейное взаимодействие 

M - Model - модельный паттерн
V - viver - Этот слой занимается представлением Через него идет общение 
между слоем Р и M
P - Prezenter  

Архитектурные паттерны это связь между слоями
DAL- Дата акцесс леер - слой для  Ответственность для хранения данных 


MVC - Паттерн 

..............................................................

 Архитектурные паттерны - это типовые решения, которые используются в процессе проектирования и разработки программного обеспечения.
Они представляют собой набор правил, принципов и практик, которые помогают создавать более гибкие,
масштабируемые и поддерживаемые системы.

 Архитектурные паттерны могут быть классифицированы по различным категориям, 
включая структурные паттерны, поведенческие паттерны и паттерны проектирования.
Каждый паттерн имеет свои преимущества и недостатки,
и выбор подходящего паттерна зависит от конкретной ситуации и требований проекта.

 Некоторые из наиболее известных архитектурных паттернов включают в себя:

 1) MVC (Model-View-Controller) - этот паттерн разделяет приложение на три основных компонента:
модель, представление и контроллер. Модель отвечает за хранение и обработку данных, представление отображает данные пользователю,
а контроллер обрабатывает взаимодействие между моделью и представлением.

 2) MVP (Model-View-Presenter) - этот паттерн похож на MVC, но добавляет дополнительный слой - презентатор,
который отвечает за координацию между моделью и представлением и позволяет более гибко изменять представление без влияния на контроллер.

 3) MVVM (Model-View-View-Model) - данный паттерн используется в основном в приложениях, разработанных на платформе.

  DAL (Data Access Layer) - это уровень доступа к данным, который является частью архитектуры приложения и отвечает за взаимодействие с базой данных.
 Он включает в себя методы для выполнения различных операций с данными, таких как чтение, запись, обновление и удаление.
 DAL может использовать различные технологии для доступа к данным, такие как ADO.NET, Entity Framework или NHibernate.

  DTO (Data Transfer Object) - это класс, который используется для передачи данных между различными компонентами приложения.
 Он содержит только данные и не имеет логики. DTO используются, когда нужно передать данные между слоями приложения или 
 между разными частями одного слоя. Например, если у вас есть класс User, который находится в слое бизнес-логики, 
 и вы хотите передать его в слой представления, 
 то вы можете создать DTO, который будет содержать только необходимые для представления данные из класса User.

  UI (User Interface) - это интерфейс, который позволяет пользователю взаимодействовать с программой.
 Он включает в себя все элементы, такие как кнопки, поля ввода, меню, значки и т.д., которые позволяют пользователю выполнять задачи в приложении.
 UI является важной частью любого программного обеспечения и должен быть удобным, понятным и привлекательным для пользователей.
 ...............................................................
 Пример :
 У нас есть фреймворк для работы надо определить на какой модели построена наша программа. И тем самым мы можем определить где что искать.
 MVC MVP  MVVM - Это все трех слойные модели. У них прямые связи

 M - Отвечает как храняться данные и за доменную логику.

 MVVM - Хранит часть взаимодействий с перекрестными взаимоотношениями

 Пример:
 есть пользователь у которого есть (Объект - тип) Категория доступа
 Работа MVVM будет заключаться в конверсии из битового набора данных в некий сериализованный код.
 
  Сериализация - это процесс преобразования объекта в последовательность байтов, которая может быть сохранена или передана по сети.
 Затем эта последовательность байтов может быть использована для воссоздания исходного объекта на другой стороне. 
 Сериализация используется для хранения объектов в файлах,
 базах данных, передачи их по сети и т.д. В .NET для сериализации используется класс BinaryFormatter или JsonSerializer.

 MVP - ней сдлои могут выкидывать друг друга. View часть общается с Model с помощью jaiso 

 MVP Самая продвинутая и широко используемая модель.
 MVVM - хорошо использовать с приложениями различных Пользователей и Платформа. Пример 1С программа 
 И можно создать любые приложения через сервер.

 ..................
  MVP модель паттерна используется в основном для разработки мобильных приложений. 
 Она позволяет разделить приложение на отдельные компоненты, что облегчает тестирование и разработку.
 Кроме того, MVP модель позволяет улучшить производительность приложения,
 так как каждый компонент отвечает за свою часть работы

 MVP - Тут каждый слой может работать не зависимо от другого. 
 ..................
  MVC паттерн используется во многих веб-приложениях. Он разделяет приложение на три компонента: 
 модель (Model), представление (View) и контроллер (Controller). Модель отвечает за работу с данными,
 представление отображает информацию пользователю, 
 а контроллер обрабатывает действия пользователя и передает их на модель и представление.
 ..................
  MVVM используется в основном в приложениях, разработанных на платформе .NET, таких как Windows Phone, Windows Forms и Xamarin.Forms.
 Он представляет собой архитектурный паттерн, который разделяет приложение на три слоя: модель (Model), представление (ViewModel) и представление (View).
 Этот паттерн позволяет отделить логику представления от логики модели, что делает приложение более модульным и упрощает его тестирование.
 .................

 restAPI - Это в микросервисной архитектуре обращается по restAPI к сервисной архитектуре. Это когда часть сайта работает хорошо а торая часть плохо.
 restAPI - это взаимодействие с сервисом .

 Controller - это способ передачи данных в связъ Model. 

 MVC модели могут быть сделаны на разных языках. Model -  на С++ View - на С# Controller - допустим на PHP  И 
 Все это взаимодействие модулей.

 Красно - белое дерево с ключем по времени.



  ЭТАПЫ ПРОЕКТИРОВАНИЯ до того как писать код:

  1) Диаграмма Прецендентов - 
  1.1) Диаграмма Активности - Это Алгоритм по действиям (Это действие или процесс)
  2)Диаграмма коммуникаций - Диаграмма взаимосвязи.(Какие методы должны быть у объектов с которыми мы общаемся)
  3)Диаграмма развертывания - показывает физическую структуру системы, то есть расположение компонентов системы на оборудовании. 
		Она включает в себя узлы на которых развернуты компоненты системы, а также связи между узлами и компонентами. 
  4) Диаграмма состояний (процессов) - Диаграмма процессов в UML используется для описания потока управления в системе, 
		Она показывает последовательность выполнения активностей и передачу управления между ними.
		 может использоваться для анализа и оптимизации потока управления в системе, а также для документирования требований к системе.
  4.4) Диаграмма компонентов - Диаграмма компонентов в UML используется для отображения структуры системы на уровне компонентов. Она показывает, из каких компонентов состоит система, как они связаны между собой, а также зависимости между компонентами. 
  Диаграмма компонентов может использоваться для анализа структуры системы,
  разделения ее на подсистемы и определения требований к отдельным компонентам.

  НА ЭТОЙ СТАДИИ ОПРЕДЕЛЯЕМ - фАСАД ЭТО БУДЕТ . МОСТ ИЛИ. ЧТО
  5) Диаграмма классов - Связи композиций и связи использования ( Если части будут сильно меняться до лучше их заменить с Помощью связей)
  Стремимся к низкой связности и высокому зацепления 
  Связь - Это прямое использование. Наследование это тоже. Композиция 
  А Агрегация увеличивает Счетчик Зацепления.
  Где планируются регулярные изменения- там надо делать связь Зацепления.(Делаем общий интерфейс и т.д)
  Пример: Карты
  Связь по мастям меняться не будет - тут можно сделать связь композиция или прямая(т.к масти никогда не изменятся (Но только для одной игры)
  Связь карт с enum (допустим) Джокеров можно создать особое свойство. Дополнительно для них.
  Просто разные enum Для дурака с одими картами один. enum2 - для покера(Дополнительные Джокер + двойки) . enum2 - Таро карты(дополнительные)





*/